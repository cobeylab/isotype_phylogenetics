xlab('p value') + ylab('Frequency')
pdf('../figures/clustering_p_value.pdf', height = 8, width = 10)
plot(p_value_pl)
dev.off()
# Script for plotting distribution of clustering index for IgG and IgA:
library(ggplot2)
library(cowplot)
results_01107PB <- read.table('../results/test_clustering/summary_stats_clustering_01107PB.csv', header =T, sep = ',')
results_01207PB <- read.table('../results/test_clustering/summary_stats_clustering_01207PB.csv', header =T, sep = ',')
results_SFAPB <- read.table('../results/test_clustering/summary_stats_clustering_SFAPB.csv', header =T, sep = ',')
dataframe_list = list('01107PB' = results_01107PB, '01207PB' = results_01207PB, 'SFAPB' = results_SFAPB)
dataset_vector <- c()
isotype_vector <- c()
clustering_index_vector <- c()
p_value_vector <- c()
# Condense dataframes into single dataframe for ggplot
for(dataset in c('01107PB', '01207PB', 'SFAPB')){
data_frame <- dataframe_list[[dataset]]
for(isotype in c('IgA', 'IgG')){
obs_subtree_mean_size <- data_frame[,paste('mean_',isotype,'_subtree_size', sep = '')]
rdm_subtree_mean_size <- data_frame[,paste('mean_',isotype,'_subtree_rdm', sep = '')]
sd_subtree_size_rdm <- data_frame[,paste('SD_',isotype,'_subtree_rdm', sep = '')]
p_value <- data_frame[, paste('p_', isotype, '_subtree_rdm', sep = '')]
clustering_index <- (obs_subtree_mean_size - rdm_subtree_mean_size) / sd_subtree_size_rdm
# Remove Inf values caused by clones with no variation in randomizations
#clustering_index <- clustering_index[clustering_index != Inf]
clustering_index_vector <- c(clustering_index_vector, clustering_index)
dataset_vector <- c(dataset_vector, rep(dataset, length(clustering_index)))
isotype_vector <- c(isotype_vector, rep(isotype, length(clustering_index)))
p_value_vector <- c(p_value_vector, p_value)
}
}
dataset_vector <- factor(dataset_vector, levels = c('01107PB', '01207PB', 'SFAPB'))
isotype_vector <- factor(isotype_vector, levels = c('IgA','IgG'))
combined_dataframe <- data.frame(dataset = dataset_vector, isotype = isotype_vector,
clustering_index = clustering_index_vector, p_value = p_value_vector)
# ================ DEFINING GGPLOT2 PARAMETERS ===============
title_size <- 7
axis_title_size <- 11
y_axis_text_size <- 11
x_axis_text_size <- 11
axis_title_size_subplot <- 5
y_axis_text_size_subplot <- 5
x_axis_text_size_subplot <- 5
ylab_distance <- 7
xlab_distance <- 7
plot_margins <- c(0.1, 0.1, 0.1, 0.1)
lineage_names <- c(
'CH103' = "CH103 (H)",
'CH103L' = "CH103 (L)",
'VRC26' = "VRC26 (H)",
'VRC26L' = "VRC26 (L)",
'VRC01_13' = 'VRC01-13 (H)',
'VRC01_01' = 'VRC01-01 (H)',
'VRC01_19' = 'VRC01-19 (H)'
)
ggplot_theme <- theme_bw() +
theme(axis.title.y = element_text(size = axis_title_size,
margin = margin(0,ylab_distance,0,0)),
axis.title.x = element_text(size = axis_title_size,
margin = margin(xlab_distance,0,0,0)),
axis.text.x = element_text(size = x_axis_text_size, vjust = 0.6),
axis.text.y = element_text(size = y_axis_text_size),
axis.ticks.x = element_line(size = 0.3),
axis.ticks.y = element_line(size = 0.3),
axis.ticks.length = unit(0.2, "cm"),
#plot.margin = unit(c(1, 1, 1, 1),"cm"),
title = element_text(size = title_size),
strip.text = element_text(size = 20),
plot.title = element_text(hjust = 0.5, size = 18),
legend.position = 'top',
legend.text=element_text(size=16),
legend.title = element_text(size = 16),
panel.grid.minor = element_line(size = 0.1),
panel.grid.major = element_line(size = 0.2)
)
###### PLOTS #####
c_index_pl <- ggplot(combined_dataframe, aes(x = clustering_index, fill = isotype)) +
geom_density(alpha = 0.6) + ggplot_theme +
facet_wrap(~dataset, scales = "free") +
scale_x_continuous(limits = c(-150,150)) +
scale_y_continuous(expand = c(0,0)) +
geom_vline(xintercept = 0, linetype=2) +
xlab('Clustering index') + ylab('Density')
pdf('../figures/clustering_index_dist.pdf', height = 5, width = 12)
plot(c_index_pl)
dev.off()
p_value_pl <- ggplot(combined_dataframe, aes(x = p_value, fill = isotype)) +
geom_histogram(colour = 'black') + ggplot_theme +
facet_grid(isotype~dataset) +
scale_y_continuous(expand = c(0,0), limits = c(0,65)) +
geom_vline(xintercept = 0.05, linetype=2) +
xlab('p value') + ylab('Frequency')
pdf('../figures/clustering_p_value.pdf', height = 8, width = 10)
plot(p_value_pl)
dev.off()
rm(list=ls(all=T))
# Script for plotting distribution of clustering index for IgG and IgA:
library(ggplot2)
library(cowplot)
results_01107PB <- read.table('../results/test_clustering/summary_stats_clustering_01107PB.csv', header =T, sep = ',')
results_01207PB <- read.table('../results/test_clustering/summary_stats_clustering_01207PB.csv', header =T, sep = ',')
results_SFAPB <- read.table('../results/test_clustering/summary_stats_clustering_SFAPB.csv', header =T, sep = ',')
dataframe_list = list('01107PB' = results_01107PB, '01207PB' = results_01207PB, 'SFAPB' = results_SFAPB)
dataset_vector <- c()
isotype_vector <- c()
clustering_index_vector <- c()
p_value_vector <- c()
# Condense dataframes into single dataframe for ggplot
for(dataset in c('01107PB', '01207PB', 'SFAPB')){
data_frame <- dataframe_list[[dataset]]
for(isotype in c('IgA', 'IgG')){
obs_subtree_mean_size <- data_frame[,paste('mean_',isotype,'_subtree_size', sep = '')]
rdm_subtree_mean_size <- data_frame[,paste('mean_',isotype,'_subtree_rdm', sep = '')]
sd_subtree_size_rdm <- data_frame[,paste('SD_',isotype,'_subtree_rdm', sep = '')]
p_value <- data_frame[, paste('p_', isotype, '_subtree_rdm', sep = '')]
clustering_index <- (obs_subtree_mean_size - rdm_subtree_mean_size) / sd_subtree_size_rdm
# Remove Inf values caused by clones with no variation in randomizations
#clustering_index <- clustering_index[clustering_index != Inf]
clustering_index_vector <- c(clustering_index_vector, clustering_index)
dataset_vector <- c(dataset_vector, rep(dataset, length(clustering_index)))
isotype_vector <- c(isotype_vector, rep(isotype, length(clustering_index)))
p_value_vector <- c(p_value_vector, p_value)
}
}
dataset_vector <- factor(dataset_vector, levels = c('01107PB', '01207PB', 'SFAPB'))
isotype_vector <- factor(isotype_vector, levels = c('IgA','IgG'))
combined_dataframe <- data.frame(dataset = dataset_vector, isotype = isotype_vector,
clustering_index = clustering_index_vector, p_value = p_value_vector)
# ================ DEFINING GGPLOT2 PARAMETERS ===============
title_size <- 7
axis_title_size <- 11
y_axis_text_size <- 11
x_axis_text_size <- 11
axis_title_size_subplot <- 5
y_axis_text_size_subplot <- 5
x_axis_text_size_subplot <- 5
ylab_distance <- 7
xlab_distance <- 7
plot_margins <- c(0.1, 0.1, 0.1, 0.1)
lineage_names <- c(
'CH103' = "CH103 (H)",
'CH103L' = "CH103 (L)",
'VRC26' = "VRC26 (H)",
'VRC26L' = "VRC26 (L)",
'VRC01_13' = 'VRC01-13 (H)',
'VRC01_01' = 'VRC01-01 (H)',
'VRC01_19' = 'VRC01-19 (H)'
)
ggplot_theme <- theme_bw() +
theme(axis.title.y = element_text(size = axis_title_size,
margin = margin(0,ylab_distance,0,0)),
axis.title.x = element_text(size = axis_title_size,
margin = margin(xlab_distance,0,0,0)),
axis.text.x = element_text(size = x_axis_text_size, vjust = 0.6),
axis.text.y = element_text(size = y_axis_text_size),
axis.ticks.x = element_line(size = 0.3),
axis.ticks.y = element_line(size = 0.3),
axis.ticks.length = unit(0.2, "cm"),
#plot.margin = unit(c(1, 1, 1, 1),"cm"),
title = element_text(size = title_size),
strip.text = element_text(size = 20),
plot.title = element_text(hjust = 0.5, size = 18),
legend.position = 'top',
legend.text=element_text(size=16),
legend.title = element_text(size = 16),
panel.grid.minor = element_line(size = 0.1),
panel.grid.major = element_line(size = 0.2)
)
###### PLOTS #####
c_index_pl <- ggplot(combined_dataframe, aes(x = clustering_index, fill = isotype)) +
geom_density(alpha = 0.6) + ggplot_theme +
facet_wrap(~dataset, scales = "free") +
scale_x_continuous(limits = c(-150,150)) +
scale_y_continuous(expand = c(0,0)) +
geom_vline(xintercept = 0, linetype=2) +
xlab('Clustering index') + ylab('Density')
pdf('../figures/clustering_index_dist.pdf', height = 5, width = 12)
plot(c_index_pl)
dev.off()
p_value_pl <- ggplot(combined_dataframe, aes(x = p_value, fill = isotype)) +
geom_histogram(colour = 'black') + ggplot_theme +
facet_grid(isotype~dataset) +
scale_y_continuous(expand = c(0,0), limits = c(0,65)) +
geom_vline(xintercept = 0.05, linetype=2) +
xlab('p value') + ylab('Frequency')
pdf('../figures/clustering_p_value.pdf', height = 8, width = 10)
plot(p_value_pl)
dev.off()
ggplot(combined_dataframe, aes(x = n_sequences, y = mean_divergence, colour = clone_type)) +
geom_point()
names(combined_dataframe)
rm(list=ls(all=T))
# Script for plotting the relationships between divergence and IgG/IgA composition:
library(ggplot2)
library(cowplot)
results_01107PB <- read.table('../results/divergence_vs_composition_01107PB.csv', header =T, sep = ',')
results_01207PB <- read.table('../results/divergence_vs_composition_01207PB.csv', header =T, sep = ',')
results_SFAPB <- read.table('../results/divergence_vs_composition_SFAPB.csv', header =T, sep = ',')
dataframe_list = list('01107PB' = results_01107PB, '01207PB' = results_01207PB, 'SFAPB' = results_SFAPB)
dataset_vector <- c()
isotype_vector <- c()
clustering_index_vector <- c()
p_value_vector <- c()
# Condense dataframes into single dataframe for ggplot
combined_dataframe <- rbind(results_01107PB, results_01207PB, results_SFAPB)
dataset <- c(rep('01107PB', nrow(results_01107PB)), rep('01207PB', nrow(results_01207PB)),
rep('SFAPB', nrow(results_SFAPB)))
dataset <- factor(dataset, levels = c('01107PB','01207PB','SFAPB'))
combined_dataframe <- cbind(dataset, combined_dataframe)
rm(dataset)
# Classify clone into IgA but not IgG, IgG but not IgA, or both IgG and IgA:
clone_type <- c()
for(row in 1:nrow(combined_dataframe)){
n_iga = combined_dataframe$n_iga[row]
n_igg = combined_dataframe$n_igg[row]
if(n_iga > 0 & n_igg == 0){
type <- 'IgA_no_IgG'
}
if(n_igg > 0 & n_iga == 0){
type <- 'IgG_no_IgA'
}
if(n_igg > 0 & n_iga > 0){
type <- 'IgG_and_IgA'
}
if(n_igg == 0 & n_iga == 0){
type <- 'no_IgG_no_IgA'
}
clone_type <- c(clone_type, type)
}
clone_type <- factor(clone_type, levels = c('IgA_no_IgG', 'IgG_no_IgA', 'IgG_and_IgA', 'no_IgG_no_IgA'))
combined_dataframe <- cbind(combined_dataframe, clone_type)
rm(clone_type)
#================ DEFINING GGPLOT2 PARAMETERS ===============
title_size <- 7
axis_title_size <- 11
y_axis_text_size <- 11
x_axis_text_size <- 11
axis_title_size_subplot <- 5
y_axis_text_size_subplot <- 5
x_axis_text_size_subplot <- 5
ylab_distance <- 7
xlab_distance <- 7
plot_margins <- c(0.1, 0.1, 0.1, 0.1)
lineage_names <- c(
'CH103' = "CH103 (H)",
'CH103L' = "CH103 (L)",
'VRC26' = "VRC26 (H)",
'VRC26L' = "VRC26 (L)",
'VRC01_13' = 'VRC01-13 (H)',
'VRC01_01' = 'VRC01-01 (H)',
'VRC01_19' = 'VRC01-19 (H)'
)
ggplot_theme <- theme_bw() +
theme(axis.title.y = element_text(size = axis_title_size,
margin = margin(0,ylab_distance,0,0)),
axis.title.x = element_text(size = axis_title_size,
margin = margin(xlab_distance,0,0,0)),
axis.text.x = element_text(size = x_axis_text_size, vjust = 0.6),
axis.text.y = element_text(size = y_axis_text_size),
axis.ticks.x = element_line(size = 0.3),
axis.ticks.y = element_line(size = 0.3),
axis.ticks.length = unit(0.2, "cm"),
#plot.margin = unit(c(1, 1, 1, 1),"cm"),
title = element_text(size = title_size),
strip.text = element_text(size = 20),
plot.title = element_text(hjust = 0.5, size = 18),
legend.position = 'top',
legend.text=element_text(size=16),
legend.title = element_text(size = 16),
panel.grid.minor = element_line(size = 0.1),
panel.grid.major = element_line(size = 0.2)
)
ggplot(combined_dataframe, aes(x = n_sequences, y = mean_divergence, colour = clone_type)) +
geom_point()
ggplot(combined_dataframe, aes(x = n_sequences, y = mean_divergence, colour = clone_type)) +
geom_point() + facet_wrap(~dataset, scales = "free")
ggplot(combined_dataframe, aes(x = n_sequences, y = mean_divergence, colour = clone_type)) +
geom_point() + facet_wrap(~dataset, scales = "free") + scale_x_log10()
ggplot(combined_dataframe, aes(x = n_sequences, y = mean_divergence, colour = clone_type)) +
geom_point() +
facet_wrap(~dataset, scales = "free") +
scale_x_log10() +
geom_smooth(method = 'lm', formula = combined_dataframe$mean_divergence~log(combined_dataframe$n_sequences))
ggplot(combined_dataframe, aes(x = n_sequences, y = mean_divergence, colour = clone_type)) +
geom_point() +
facet_wrap(~dataset, scales = "free") +
scale_x_log10() +
geom_smooth(method = 'lm')
log(10)
log10(10)
ggplot(combined_dataframe, aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point() +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm')
?geom_smooth
ggplot(combined_dataframe, aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point() +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point() +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 2) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 3) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_color_brewer(palette=1)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_color_brewer(palette=2)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_color_brewer(palette=3)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_color_brewer(palette=4)
?scale_color_brewer
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_color_brewer(type = 'qual',palette=4)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_color_brewer(type = 'qual',palette=1)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_color_brewer(type = 'qual',palette=2)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_color_brewer(type = 'qual',palette=3)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_color_brewer(type = 'qual',palette=5)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_color_brewer(type = 'qual',palette=6)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_color_brewer(type = 'qual',palette=7)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_color_brewer(type = 'qual',palette=8)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_color_brewer(type = 'qual',palette=9)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_color_brewer(type = 'qual',palette=6)
combined_dataframe$n_sequences[combined_dataframe$clone_type == 'IgG_and_IgA']
min(combined_dataframe$n_sequences[combined_dataframe$clone_type == 'IgG_and_IgA'])
log10(5)
log(combined_dataframe$n_sequences[combined_dataframe$clone_type == 'IgG_and_IgA'])
min(log(combined_dataframe$n_sequences[combined_dataframe$clone_type == 'IgG_and_IgA']))
min(log(combined_dataframe$n_sequences[combined_dataframe$clone_type == 'IgG_no_IgA']))
min(log(combined_dataframe$n_sequences[combined_dataframe$clone_type == 'IgA_no_IgG']))
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_x_continuous(limits=c(0,4))
scale_color_brewer(type = 'qual',palette=6)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_x_continuous(limits=c(0.5,4)) +
scale_color_brewer(type = 'qual',palette=6)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_x_continuous(limits=c(0.5,4)) +
scale_color_brewer(type = 'qual',palette=6) +
xlab("Number of sequences (log10)") + ylab("Mean divergence from germline")
10^(3.9)
10^(3.5)
10^(3.7)
10^(3.6)
ggplot(subset(combined_dataframe, clone_type != 'no_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
ggplot_theme +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_x_continuous(limits=c(0.5,4)) +
scale_color_brewer(type = 'qual',palette=6) +
xlab("Number of sequences (log10)") + ylab("Mean divergence from germline")
ggplot(subset(combined_dataframe, clone_type != 'Ano_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
ggplot_theme +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_x_continuous(limits=c(0.5,4)) +
scale_color_brewer(type = 'qual',palette=6) +
xlab("Number of sequences (log10)") + ylab("Mean divergence from germline")
div_vs_size <- ggplot(subset(combined_dataframe, clone_type != 'Ano_IgG_no_IgA'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
ggplot_theme +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_x_continuous(limits=c(0.5,4)) +
scale_color_brewer(type = 'qual',palette=6) +
xlab("Number of sequences (log10)") + ylab("Mean divergence from germline")
subset(combined_dataframe)
div_vs_size <- ggplot(subset(combined_dataframe, clone_type != 'XXXXXX'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
ggplot_theme +
facet_wrap(~dataset, scales = "free") +
geom_smooth(method = 'lm', se = FALSE) +
scale_x_continuous(limits=c(0.5,4)) +
scale_color_brewer(type = 'qual',palette=6) +
xlab("Number of sequences (log10)") + ylab("Mean divergence from germline")
pdf('../figures/divergence_vs_size.pdf', height = 5, width = 12)
plot(div_vs_size)
dev.off()
?facet_wrap
ggplot(subset(combined_dataframe, clone_type != 'XXXXXX'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
ggplot_theme +
facet_wrap(~dataset, scales = "fixed") +
geom_smooth(method = 'lm', se = FALSE) +
scale_x_continuous(limits=c(0.5,4)) +
scale_color_brewer(type = 'qual',palette=6) +
xlab("Number of sequences (log10)") + ylab("Mean divergence from germline")
pdf('../figures/divergence_vs_size.pdf', height = 5, width = 12)
plot(div_vs_size)
dev.off()
ggplot(subset(combined_dataframe, clone_type != 'XXXXXX'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
ggplot_theme +
facet_wrap(~dataset, scales = "fixed") +
geom_smooth(method = 'lm', se = FALSE) +
scale_x_continuous(limits=c(0.5,4)) +
scale_color_brewer(type = 'qual',palette=6) +
xlab("Number of sequences (log10)") + ylab("Mean divergence from germline")
div_vs_size <- ggplot(subset(combined_dataframe, clone_type != 'XXXXXX'),
aes(x = log10(n_sequences), y = mean_divergence, colour = clone_type)) +
geom_point(shape = 1) +
ggplot_theme +
facet_wrap(~dataset, scales = "fixed") +
geom_smooth(method = 'lm', se = FALSE) +
scale_x_continuous(limits=c(0.5,4)) +
scale_color_brewer(type = 'qual',palette=6) +
xlab("Number of sequences (log10)") + ylab("Mean divergence from germline")
pdf('../figures/divergence_vs_size.pdf', height = 5, width = 12)
plot(div_vs_size)
dev.off()
